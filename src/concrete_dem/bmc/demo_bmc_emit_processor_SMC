// =============================================================================
// PROJECT CHRONO - http://projectchrono.org
//
// Copyright (c) 2014 projectchrono.org
// All rights reserved.
//
// Use of this source code is governed by a BSD-style license that can be found
// in the LICENSE file at the top level of the distribution and at
// http://projectchrono.org/license-chrono.txt.
//
// =============================================================================
// Authors: Bahar Ayhan
// =============================================================================
//
//   Demo code about building materail cell (bmc)

//
// =============================================================================

//#include "chrono/physics/ChSystemSMC.h"
//#include "chrono/particlefactory/ChParticleEmitter.h"
//#include "chrono/particlefactory/ChParticleRemover.h"


#include "mycontact_V2_2_floc.cpp"

#include "ChSystemSMC.h"
#include "ChParticleEmitter_SMC.h"
#include "ChRandomShapeCreator_SMC.h"
#include "chrono/particlefactory/ChParticleRemover.h"
#include "chrono/assets/ChTexture.h"

#include "chrono_irrlicht/ChVisualSystemIrrlicht.h"

#include "chrono_thirdparty/rapidjson/prettywriter.h"
#include "chrono_thirdparty/rapidjson/stringbuffer.h"
#include "chrono_thirdparty/filesystem/path.h"

#include "chrono/physics/ChLinkMotorLinearPosition.h"
#include "chrono/physics/ChLinkMotorLinearSpeed.h"
#include "chrono/physics/ChLinkMotorRotationAngle.h"
#include "chrono/physics/ChLinkMotorRotationSpeed.h"
#include "chrono/motion_functions/ChFunctionRotation_axis.h"

#include "chrono/physics/ChLinkMotionImposed.h"

#include "chrono/physics/ChInertiaUtils.h"
#include "chrono/utils/ChUtilsGeometry.h"
#include "chrono/utils/ChUtilsGenerators.h"
#include "chrono/utils/ChUtilsInputOutput.h"

#include "chrono/motion_functions/ChFunctionPosition_XYZfunctions.h"

//#include "chrono/assets/ChVisualShapeTriangleMesh.h"
#include "chrono/assets/ChTriangleMeshShape.h"

#include <chrono/physics/ChLinkMate.h>

// Use the main namespace of Chrono, and other chrono namespaces
using namespace chrono;
using namespace chrono::particlefactory;
using namespace chrono::irrlicht;
using namespace chrono::geometry;

double density_steel=7.8E-9;
// Parameters of the bmcRod and the container
double bmcRod_AngVel = 300.;   //*CH_C_2PI;
double total_mass = 5.22;
std::string bmcRod_obj = "bmcRod.obj";
std::string bmcContainer_obj = "bmcContainer.obj";

// Initial Position and Velocity of the bmcRod and the container
ChVector<> bmcRod_IniPos(0.0, 0.16, 0.05);
ChVector<> bmcContainer_IniPos(0.0, 0.0, 0.0);
ChVector<> bmcRod_IniVel(0.0, 0.0, 0.0);
ChVector<> bmcContainer_IniVel(0.0, 0.0, 0.0);


double calculateKE(ChSystem& sys){
	double KE=0;
	for (auto body:sys.Get_bodylist()){
		if (body->GetBodyFixed() || body->GetCollisionModel()->GetShape(0)->GetType()!=0 )
			continue;
		ChVector<> velo=body->GetFrame_COG_to_abs().GetPos_dt();
		ChVector<> Wvelo=body->GetFrame_COG_to_abs().GetWvel_loc();
		double velMag=velo.Length();
		double WvelMag=Wvelo.Length();
		KE+=0.5*body->GetMass()*velMag*velMag + 0.5* body->GetInertiaXX()[0]*WvelMag*WvelMag;		
	}
	
	return KE;
};


std::shared_ptr<ChBodyAuxRef> CreateBMCrod(ChSystem& sysMBS, std::shared_ptr<ChVisualSystemIrrlicht>& vis, std::shared_ptr<ChBody> ground, std::string current_dir) {
    std::string bmcRod_obj = (current_dir+"/bmcRod.obj").c_str();
    
    // Common contact material
    auto cmaterial = chrono_types::make_shared<ChMaterialSurfaceSMC>();
    cmaterial->SetYoungModulus(1e2);
    cmaterial->SetFriction(0.5f);
    cmaterial->SetRestitution(0.0f);
    cmaterial->SetAdhesion(0);
    
    
    // Create the BMC rod
    auto trimesh = chrono_types::make_shared<ChTriangleMeshConnected>();
    double scale_ratio = 1;//0.05555556;
    trimesh->LoadWavefrontMesh(bmcRod_obj, false, true);
    trimesh->Transform(ChVector<>(0, 0, 0), ChMatrix33<>(scale_ratio));  // scale to a different size
    trimesh->RepairDuplicateVertexes(1e-9);                              // if meshes are not watertight

    // Compute mass inertia from mesh
    double mmass;
    double mdensity = density_steel;
    ChVector<> mcog;
    ChMatrix33<> minertia;
    trimesh->ComputeMassProperties(true, mmass, mcog, minertia);
    ChMatrix33<> principal_inertia_rot;
    ChVector<> principal_I;
    ChInertiaUtils::PrincipalInertia(minertia, principal_I, principal_inertia_rot);
    mcog = ChVector<>(0.0, 0.0, 0.0);
    std::cout << " minertia " << minertia << " p iner rot " << principal_inertia_rot << std::endl;
    
    // Set the abs orientation, position and velocity
    auto bmcRod = chrono_types::make_shared<ChBodyAuxRef>();
    ChQuaternion<> bmcRod_Rot = QUNIT;


    // Set the COG coordinates to barycenter, without displacing the REF reference.
    // Make the COG frame a principal frame.
    bmcRod->SetFrame_COG_to_REF(ChFrame<>(mcog, principal_inertia_rot));

    // Set inertia
    bmcRod->SetPos_dt(bmcRod_IniVel);
    bmcRod->SetWvel_loc(ChVector<>(0.0, 0.0, 0.0));  // set an initial angular velocity (rad/s)

    // Set the absolute position of the body:
    bmcRod->SetFrame_REF_to_abs(ChFrame<>(ChVector<>(bmcRod_IniPos), ChQuaternion<>(bmcRod_Rot)));
    sysMBS.AddBody(bmcRod);

    bmcRod->SetBodyFixed(false);
    bmcRod->GetCollisionModel()->ClearModel();
    bmcRod->GetCollisionModel()->AddTriangleMesh(cmaterial, trimesh, false, false, VNULL, ChMatrix33<>(1), 0.0002);
    //auto coll_shape = chrono_types::make_shared<ChCollisionShapeTriangleMesh>(cmaterial, trimesh, false, false, 0.0002);
    //bmcRod->AddCollisionShape(coll_shape);
    bmcRod->GetCollisionModel()->BuildModel();
    bmcRod->SetCollide(true);
	
	//auto trimesh = geometry::ChTriangleMeshConnected::CreateFromWavefrontFile(chassismesh, true, true);
    auto trimesh_shape = chrono_types::make_shared<ChTriangleMeshShape>();
    trimesh_shape->SetMesh(trimesh);
    trimesh_shape->SetMutable(false);
    trimesh_shape->SetColor(ChColor(0.2f, 0.32f, 0.48f));
    bmcRod->AddVisualShape(trimesh_shape, bmcRod->GetFrame_REF_to_abs());
	
	vis->BindItem(bmcRod);
    
    //re-assign mass & inertia
    bmcRod->SetMass(mmass*density_steel);
    bmcRod->SetInertia(principal_I*density_steel);
    std::cout << " principal_I : " << bmcRod->GetInertia() << " mass : " << bmcRod->GetMass() << std::endl;
   
       
    // Connect the bmcShaft to the bmcApparatus through a vertical translational joint.
    /*auto prismatic2 = chrono_types::make_shared<ChLinkLockPrismatic>();
    prismatic2->Initialize(bmcRod, ground, ChCoordsys<>(bmcRod->GetPos(), QUNIT));
    prismatic2->SetName("prismatic_bmcShaft_bmcApparatus");
    sysMBS.AddLink(prismatic2);*/
    
    return bmcRod;
}

std::shared_ptr<ChBody> AddBMCContainer(ChSystem& sys, std::shared_ptr<ChMaterialSurface> mat, double density, std::string current_dir) {
    // create container 
   
	auto container = chrono_types::make_shared<ChBodyEasyMesh>(
        (current_dir+"/bmcContainer.obj").c_str(),  // file name for OBJ Wavefront mesh
        density,                                         // density of the body
        true,                                         // automatic evaluation of mass, COG position, inertia tensor
        true,                                         // attach visualization asset
        true,                                         // enable the collision detection
        mat,                                     // surface contact material
        1.0  // radius of 'inflating' of mesh (for more robust collision detection)
    );	
	//	
	ChQuaternion<> q=Q_from_AngAxis(CH_C_PI_2, VECT_Z);
	container->SetRot(q);
	container->SetPos(ChVector<>(0,0,0));	
	//container->GetVisualShape(0)->GetMaterial(0)->SetOpacity(0.5);
	//container->SetBodyFixed(true);	
    sys.AddBody(container); 
    return container;	
	
}

std::shared_ptr<ChBody> AddBMCRod(ChSystem& sys, std::shared_ptr<ChMaterialSurface> mat, double density, std::string current_dir) {
    // create container 
   
	auto rod = chrono_types::make_shared<ChBodyEasyMesh>(
        (current_dir+"/bmcRod.obj").c_str(),  // file name for OBJ Wavefront mesh
        density,                                         // density of the body
        true,                                         // automatic evaluation of mass, COG position, inertia tensor
        true,                                         // attach visualization asset
        true,                                         // enable the collision detection
        mat,                                     // surface contact material
        1.0  // radius of 'inflating' of mesh (for more robust collision detection)
    );	
	//	
	ChQuaternion<> q=Q_from_AngAxis(CH_C_PI_2, VECT_Z);
	rod->SetRot(q);
	rod->SetPos(ChVector<>(0,50,0));
	//container->GetVisualShape(0)->GetMaterial(0)->SetOpacity(0.5);
	//container->SetBodyFixed(true);	
    sys.AddBody(rod); 
	
	
    return rod;	
	
}


std::shared_ptr<ChBody> AddBMCLid(ChSystem& sys, std::shared_ptr<ChMaterialSurface> mat, double density, std::string current_dir) {
    // create container 
   
	auto lid = chrono_types::make_shared<ChBodyEasyMesh>(
        (current_dir+"/bmc_lid.obj").c_str(),  // file name for OBJ Wavefront mesh
        density,                                         // density of the body
        true,                                         // automatic evaluation of mass, COG position, inertia tensor
        true,                                         // attach visualization asset
        true,                                         // enable the collision detection
        mat,                                     // surface contact material
        1.0  // radius of 'inflating' of mesh (for more robust collision detection)
    );	
	//	
	//ChQuaternion<> q=Q_from_AngAxis(CH_C_PI_2, VECT_Z);
	//lid->SetRot(q);
	lid->SetPos(ChVector<>(0,60,0));
	//container->GetVisualShape(0)->GetMaterial(0)->SetOpacity(0.5);
	lid->SetBodyFixed(true);	
    sys.AddBody(lid); 
	
	
    return lid;	
	
}


 // Function to write particle positions and radii to a VTK file
void WriteParticlesVTK(ChSystem& sys, const std::string& filename) {
     // Get the number of particles
     auto body_list= sys.Get_bodylist();
     
	 std::vector<std::shared_ptr<ChBody>> body_list_new;
	 for (auto body:body_list){
		 if (body->GetBodyFixed() || body->GetCollisionModel()->GetShape(0)->GetType()!=0)
			 continue;
		 body_list_new.push_back(body);
	 }
			
	int num_particles = body_list_new.size();
	
     // Create the VTK file and write the header
     std::ofstream vtk_file(filename);
     vtk_file << "# vtk DataFile Version 3.0\n";
     vtk_file << "vtk output\n";
     vtk_file << "ASCII\n";
     vtk_file << "DATASET UNSTRUCTURED_GRID\n";

     // Write the particle positions
     vtk_file << "POINTS " << num_particles << " float\n";
     for (int i = 0; i < num_particles; i++) {
         ChVector<float> pos = body_list_new[i]->GetPos();
         vtk_file << pos.x() << " " << pos.y() << " " << pos.z() << "\n";
     }

     // Write the particle IDs
     vtk_file << "\nCELLS " << num_particles << " " << num_particles * 2 << "\n";
     for (int i = 0; i < num_particles; i++) {
         vtk_file << "1 " << i << "\n";
     }

     // Write the cell types
     vtk_file << "\nCELL_TYPES " << num_particles << "\n";
     for (int i = 0; i < num_particles; i++) {
         vtk_file << "1\n";
     }

     // Write the particle radii
     vtk_file << "\nPOINT_DATA " << num_particles << "\n";
     vtk_file << "SCALARS radius float 1\n";
     vtk_file << "LOOKUP_TABLE default\n";
     for (int i = 0; i < num_particles; i++) {
		vtk_file << body_list_new[i]->GetCollisionModel()->GetShapeDimensions(0)[0] << "\n";
     }

     // Write the particle velocities
     vtk_file << "\nVECTORS velocity float\n";
     for (int i = 0; i < num_particles; i++) {
         ChVector<float> vel = body_list_new[i]->GetPos_dt();;
         vtk_file << vel.x() << " " << vel.y() << " " << vel.z() << "\n";
     }
	 
	 // Write the particle angular velocities
     vtk_file << "\nVECTORS angular_velocity float\n";
     for (int i = 0; i < num_particles; i++) {
         ChVector<float> w = body_list_new[i]->GetFrame_COG_to_abs().GetWvel_loc();
         vtk_file << w.x() << " " << w.y() << " " << w.z() << "\n";
     }

     // Close the file
     vtk_file.close();
}


//------------------------------------------------------------------
// Function to save BMC to Paraview VTK files
//------------------------------------------------------------------
void WritebmcSolidVTK(const std::string& filename,
                   ChTriangleMeshConnected& mesh,
                   const ChFrame<>& frame) {
    std::ofstream outf;
    outf.open(filename);
    outf << "# vtk DataFile Version 2.0" << std::endl;
    outf << "VTK from simulation" << std::endl;
    outf << "ASCII" << std::endl;
    outf << "DATASET UNSTRUCTURED_GRID" << std::endl;
    outf << "POINTS " << mesh.getCoordsVertices().size() << " "
         << "float" << std::endl;
    for (auto& v : mesh.getCoordsVertices()) {
        auto w = frame.TransformPointLocalToParent(v);
        outf << w.x() << " " << w.y() << " " << w.z() << std::endl;
    }
    auto nf = mesh.getIndicesVertexes().size();
    outf << "CELLS " << nf << " " << 4 * nf << std::endl;
    for (auto& f : mesh.getIndicesVertexes()) {
        outf << "3 " << f.x() << " " << f.y() << " " << f.z() << std::endl;
    }
    outf << "CELL_TYPES " << nf << std::endl;
    for (int i = 0; i < nf; i++) {
        outf << "5 " << std::endl;
    }
    outf.close();
}

void AddFallingItems(ChSystem& sys, std::shared_ptr<ChVisualSystemIrrlicht>& vis, std::string& data_path, std::string& file_name, double h_layer, double rho) {
    // Shared contact material for falling objects
    auto mat = chrono_types::make_shared<ChMaterialSurfaceSMC>();
    mat->SetYoungModulus(1e2); //2e3
    mat->SetFriction(0.5);
    mat->SetRestitution(0.0f);
    mat->SetAdhesion(0);
 	
	std::vector<chrono::ChVector<float>> body_points;
    std::vector<chrono::ChVector<float>> body_points_new;
	
	/*
	auto mydistribution=chrono_types::make_shared<ChConcreteDistribution>(minD, maxD, cement, AtoC, WtoC, h_layer);    
    utils::PDSampler<float> sampler(maxD*2+h_layer/2*0);
    //chrono::utils::HCPSampler<float> HCPsampler(spacing);
    ChVector<float> sampler_center(0.0f, 70.0f, 0.0f);
    //body_points = sampler.SampleCylinderY(sampler_center, box_Y/2-1.5*radius1, cyl_rad-1.5*radius1);
	body_points = sampler.SampleBox(sampler_center, ChVector<>(35,100,35));
	*/
	
	std::string nodesFilename=data_path+file_name+"_coords.dat";
	std::ifstream nodesFile(nodesFilename);   
	//
	// Read COG coordinate of bodies
	//	
    if (nodesFile.is_open()) {
       	chrono::ChVector<> pos;
       	double x, y, z;       	
		std::string line;
		
		while (std::getline(nodesFile, line)) {			
			//
			if( line[0]!='#') {				
				std::istringstream sline(line);
				sline>> x >> y >> z;
				//std::cout<<"sline"<<x<<"\t"<<y<<"\t"<<z<<std::endl;
				body_points.push_back(ChVector<>(x,y,z)); 
			}
		}
    }
    else{
    	throw chrono::ChException("ERROR opening nodes info file: " + std::string(nodesFilename) + "\n");
    	exit(EXIT_FAILURE);
    }	
	//
	// Read radius info:
	//
	std::string radiusFilename=data_path+file_name+"_radius.dat";
	std::ifstream radiusFile(radiusFilename);   
	//
	std::vector<double> body_radius;	
    if (radiusFile.is_open()) {       	
       	double rad;       	
		std::string line;
		
		while (std::getline(radiusFile, line)) {			
			//
			if( line[0]!='#') {				
				std::istringstream sline(line);
				sline>> rad;
				body_radius.push_back(rad); 
			}
		}
    }
    else{
    	throw chrono::ChException("ERROR opening nodes info file: " + std::string(nodesFilename) + "\n");
    	exit(EXIT_FAILURE);
    }
		
    auto numSpheres = body_points.size();
    //std::cout<<"numSpheres: "<<numSpheres<<std::endl;
    body_points_new.resize(numSpheres);
    int ii=0;
    int i=0;
    for (i=0; i<numSpheres; i++) {
        float x_pos=body_points[i].x();
        float y_pos=body_points[i].y();
        float z_pos=body_points[i].z();
        double y_level=y_pos-0;
        if ((y_pos>60 || y_pos<-27) || (x_pos*x_pos+z_pos*z_pos)>30.*30.)
			continue;
       
            // && y_pos>margin
            body_points_new[ii]=body_points[i];
            ChVector<> pos={x_pos, y_pos, z_pos};            
            
            //AddSphere(sys,pos);
            ii++;
        
    
    //body_points_new.resize(ii);
    //auto numSpheres_new=body_points_new.size();
    //double radius=mydistribution->GetRandom()/2;  
	double radius=body_radius[i];
    double mass = rho*4/3*pow(radius, 3)*CH_C_PI;
                
    auto body = chrono_types::make_shared<ChBody>();
    body->SetInertiaXX((2.0 / 5.0) * mass * pow(radius, 2) * ChVector<>(1, 1, 1));
    body->SetMass(mass);
    //body->SetPos(ChVector<>(11 * ix , 50+11*iy, 11 * iz));
    body->SetPos(pos);
    body->GetCollisionModel()->ClearModel();
    body->GetCollisionModel()->AddSphere(mat, radius);
    body->GetCollisionModel()->BuildModel();
    body->SetCollide(true); 
	
    auto sphereMor = chrono_types::make_shared<ChSphereShape>(radius);
	//sphereMor->SetTexture(GetChronoDataFile("textures/blue.png"));
	sphereMor->SetColor(ChColor(128.f/255, 128.f/255, 128.f/255));
	sphereMor->SetOpacity(0.25f);
	body->AddVisualShape(sphereMor);
				
	auto sphereAgg = chrono_types::make_shared<ChSphereShape>(radius-h_layer);
	//sphereAgg->SetTexture(GetChronoDataFile("textures/pink.png"));
	sphereAgg->SetColor(ChColor(5.f/255, 48.f/255, 173.f/255));	
	body->AddVisualShape(sphereAgg);
	vis->BindItem(body);	
    sys.AddBody(body);
	  
       
    }
}


int main(int argc, char* argv[]) {
    GetLog() << "Copyright (c) 2017 projectchrono.org\nChrono version: " << CHRONO_VERSION << "\n\n";
	SetChronoDataPath(CHRONO_DATA_DIR);
	///////////////////////////////////////////////////////////////////////////////////////////////////////
    ///
    /// Get the current diectory
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
	//
    std::string current_dir(argv[0]);
    int pos = current_dir.find_last_of("/\\");
    current_dir=current_dir.substr(0, pos-5); 
	//
    // Create a Chrono system
	//
    ChSystemSMC sys;
	sys.Set_G_acc(ChVector<>(0,-9810,0));
	sys.SetNumThreads(16,16,1);
	sys.SetMaxPenetrationRecoverySpeed(100.);
	//
	//
    // Create the Irrlicht visualization system
    auto vis = chrono_types::make_shared<ChVisualSystemIrrlicht>();
    vis->SetWindowSize(800, 600);
    vis->SetWindowTitle("Particle emitter, remover, processor");
    vis->Initialize();
    vis->AddLogo();
    vis->AddSkyBox();
    vis->AddTypicalLights();
    vis->AddCamera(ChVector<>(0, 170, -100));

    // Create the floor:
    auto floor_mat = chrono_types::make_shared<ChMaterialSurfaceSMC>();
	floor_mat->SetYoungModulus(1e2);
    floor_mat->SetFriction(0.5f);
    floor_mat->SetRestitution(0.0f);
    floor_mat->SetAdhesion(0);
	
	auto floorBody = chrono_types::make_shared<ChBody>();
    floorBody->SetPos(ChVector<>(0, -5, 0));
    floorBody->SetBodyFixed(true);
    sys.Add(floorBody);
	//
	double density=7.8E-9;
	auto bmcContainer =AddBMCContainer(sys, floor_mat, density, current_dir);
	bmcContainer->GetVisualShape(0)->SetOpacity(0.25f);
    bmcContainer->SetBodyFixed(true);	
	bmcContainer->GetCollisionModel()->SetFamilyGroup(2);
    bmcContainer->GetCollisionModel()->SetFamilyMaskNoCollisionWithFamily(1);
	bmcContainer->SetCollide(true);
	//	
	//	
	auto bmcLid =AddBMCLid(sys, floor_mat, density, current_dir);
	bmcContainer->GetCollisionModel()->SetFamilyGroup(2);
    bmcContainer->GetCollisionModel()->SetFamilyMaskNoCollisionWithFamily(1);
	bmcLid->SetCollide(false);
	//
	//
	auto bmcRod =CreateBMCrod(sys, vis, floorBody, current_dir);
	bmcRod->SetPos(ChVector<>(0,-35,0));
	/*auto constr_Rod=chrono_types::make_shared<ChLinkMateGeneric>(true, true, true, true, false, true);
    constr_Rod->Initialize(floorBody, bmcRod, ChFrame<>(bmcRod->GetPos(), 
        QUNIT)); 
    sys.Add(constr_Rod);*/
	bmcRod->GetCollisionModel()->SetFamilyGroup(2);
    bmcRod->GetCollisionModel()->SetFamilyMaskNoCollisionWithFamily(1);
	bmcRod->SetCollide(true);
	
	auto rodRefBody = chrono_types::make_shared<ChBody>();
    rodRefBody->SetPos(bmcRod->GetPos());
    rodRefBody->SetBodyFixed(true);
    sys.Add(rodRefBody);
	
	//	volume of specimen
	double specimenVol=40.*40.*250.;
	double Vol=specimenVol*2.;
	// Concrete properties
	double h_layer=2;
	double minD=2;
    double maxD=4;
	double cement=845;
	double WtoC=0.21;
	double AtoC=1.24;
	double rho_c=3150.;
	double rho_w=1000.;
	double vair=0.03;
	double nF=0.5;	
	double va=1.0-cement/rho_c-(WtoC*cement)/rho_w-vair;
	double va0=(1.-pow((minD/maxD),nF))*va;	
	double Va0=va0*Vol;
	double rho=cement*(1.0+WtoC+AtoC)*1E-12;
	double targetmass=Va0*rho;
	double targetVol=specimenVol*2.5;
	//double rho=2.4E-9;
	std::cout<<"targetmass "<<targetmass<<"\n";	
	std::cout<<"rho "<<rho<<"\n";
	std::cout<<"va: "<<va<<" va0 "<<va0<<"\n";
	//
	//
	// Define material parameters of fresh concrete
	//
	float mortar_layer=h_layer;  /// 1st param --> 0.75 / 1 / 1.10 / 1.20 / 1.40 
	float ENm=1.5E-2;     /// 2nd param --> 0.25 / 0.50 / 1 / 2 / 4
	float ENa=100.0*0.001;
	float h=mortar_layer;		
	float alpha=0.25;
	float beta=0.5;
	float np=1.0;
	float sgmTmax=5.0E-4;  ///3rd param 0.25 / 0.50 / 1 / 2 / 4 
	float sgmTau0=2.0E-5;  ///4th param 0.25 / 0.50 / 1 / 2 / 4  
	float kappa0=100.;
	float eta_inf=10.0E-6;/// 5th param 0.25 / 0.50 / 1 / 2 / 4 

	//
	// Save bmcRod mesh 
    //
	std::string bmcRod_obj = (current_dir+"/bmcRod.obj").c_str();
	std::string bmcContainer_obj = (current_dir+"/bmcContainer.obj").c_str();
	//
    ChTriangleMeshConnected bmcRod_mesh;
    bmcRod_mesh.LoadWavefrontMesh(bmcRod_obj, false, true);
    bmcRod_mesh.RepairDuplicateVertexes(1e-9);
	//
	ChTriangleMeshConnected bmcContainer_mesh;
    bmcContainer_mesh.LoadWavefrontMesh(bmcContainer_obj , false, true);
    bmcContainer_mesh.RepairDuplicateVertexes(1e-9);
	//
	//
	//
	auto motor = chrono_types::make_shared<ChLinkMotorRotationSpeed>();
    motor->SetName("engine_bmcRod_bmcShaft");
    motor->Initialize(bmcRod, rodRefBody, ChFrame<>(bmcRod->GetPos(), 
        chrono::Q_from_AngAxis(CH_C_PI / 2.0, VECT_X))); //Rotate on Y Axis
    //motor->SetAngleFunction(chrono_types::make_shared<ChFunctionRamp>(0, bmcRod_AngVel));
	//motor->SetSpeedFunction(chrono_types::make_shared<ChFunctionRamp>(0, 10));
    
    auto my_functsequence = chrono_types::make_shared<ChFunction_Sequence>();
    //auto my_func1 = chrono_types::make_shared<ChFunctionPoly23>(180, 0, 0.5);  // diplacement, t_start, t_end
    //auto my_func2 = chrono_types::make_shared<ChFunctionConst>(0);
    auto my_func1 = chrono_types::make_shared<ChFunction_Const>(0.);
    auto my_func2 = chrono_types::make_shared<ChFunction_Ramp>(0.,1.0472/60.);    
    my_functsequence->InsertFunct(my_func1, 0.5, 1.0, false);  // fx, duration, weight, enforce C0 continuity
    my_functsequence->InsertFunct(my_func2, 60, 1.0, true);  // fx, duration, weight, enforce C0 continuity
   
    motor->SetSpeedFunction(my_functsequence);	
    //motor->SetSpeedFunction(chrono_types::make_shared<ChFunctionConst>(100));
    sys.AddLink(motor);
    //
	//
    // Modify some setting of the physical system for the simulation, if you want
    sys.SetSolverType(ChSolver::Type::BARZILAIBORWEIN);
    sys.SetSolverMaxIterations(400);
   
	//
	//
	char filename[200];
	const std::string out_dir = current_dir + "/OUT_bmc_h2p_E1p5e-2_S5e-4_T2e-5_V1e-5/";
	// Create oputput directories
    if (!filesystem::create_directory(filesystem::path(out_dir))) {
        std::cerr << "Error creating directory " << out_dir << std::endl;
        return 1;
    }   
	
	 //
    FILE *fptr ;
    auto outfilename=out_dir+"history.txt";
    fptr= fopen(outfilename.c_str(), "w");
    fprintf(fptr,"time\t");
    fprintf(fptr,"x\t y\t z\t");
    fprintf(fptr,"vx\t vy\t vz\t");
    fprintf(fptr,"wx\t wy\t wz\t");
    fprintf(fptr,"Tx\t Ty\t Tz\n");  
	//
	//
	//
	double totalMass=0;
	for (auto body:sys.Get_bodylist()){
		if (body->GetBodyFixed() || body->GetCollisionModel()->GetShape(0)->GetType()!=0 )
			continue;
		
		totalMass+=body->GetMass();
						
	}
	std::cout<<"Total mass: "<<totalMass<<"  rho: "<<rho<<std::endl;
	//
    // Filling loop
	//
	std::cout<<" \n Phase 1 : Filling loop \n " << std::endl;
	//sys.SetMaxPenetrationRecoverySpeed(50.);
	int step_num=0;
    double timestep = 1.0E-8;
    double KE=0;
    while (sys.GetChTime()<0.5) {
		double time=sys.GetChTime();
		if (step_num%10==0){
			timestep=std::min(timestep*=1.025,5.0e-6);
			//std::cout<<"timestep: "<<timestep<<std::endl;
		}
        //vis->BeginScene();
		//vis->Run() &
        //vis->BeginScene(true, true, ChColor(100,100,100));
        //vis->Render();
        //vis->EndScene();

        // Continuosly create particle flow:
		//if(sys.GetChTime()<1.0)
		//	emitter.EmitParticles(sys, timestep);

        // Continuosly check if some particle must be removed:
        remover.ProcessParticles(sys);

        // Use the processor to count particle flow in the rectangle section:
        //processor_flowcount.ProcessParticles(sys);
        //GetLog() << "Particles being flown across rectangle:" << counter->counter << "\n";
		
        sys.DoStepDynamics(timestep);
		
		
		if (std::fmod(step_num, 400) ==0) {
		    sprintf(filename, "%s/bmc_fill%06d.vtk", out_dir.c_str(), step_num);
		    WriteParticlesVTK(sys, filename);		    	    
		    std::cout<< "filename: "<<filename<<"  timestep: "<< timestep;
			//
			sprintf(filename, "%s/bmcRod_fill%06d.vtk", out_dir.c_str(), step_num);			
            WritebmcSolidVTK(filename, bmcRod_mesh, bmcRod->GetFrame_REF_to_abs());
			//
			sprintf(filename, "%s/bmcCont_fill%06d.vtk", out_dir.c_str(), step_num);				
            WritebmcSolidVTK(filename, bmcContainer_mesh, bmcContainer->GetFrame_REF_to_abs());
			//			
			double current_time= sys.GetChTime();
			double IE;
			container->IterOnContactList(current_time,IE);
			double KE_1=KE;
			KE=calculateKE(sys);
			std::cout<<"   time: "<< current_time << " IE: "<< IE << " KE: "<< KE << "\n"; 
			//if (KE<KE_1)
			//	timestep=std::min(timestep*=2,2.0e-5);
			if (KE<1E-3 & step_num>4000)
					break;
		     
		 }
		 step_num++;
    }
	
	//
	// Unset speed limit	
	//
	bmcLid->SetCollide(true);
	for (auto body:sys.Get_bodylist()){
		if (body->GetBodyFixed() || body->GetCollisionModel()->GetShape(0)->GetType()!=0 )
			continue;
		
		body->SetLimitSpeed(false);
		//body->SetMaxSpeed(2000.);
		//body->SetMaxWvel(2000.);				
	}
	
	//
    // Rotating loop
	//
    std::cout<<" \n Phase 2 : Rotating loop \n " << std::endl;
    timestep = 1.0E-8;
    while ( sys.GetChTime()<60) {
        //vis->BeginScene();
		//vis->Run() &
        //vis->BeginScene(true, true, ChColor(100,100,100));
        //vis->Render();
        //vis->EndScene();        
		if (step_num%20==0){
			timestep=std::min(timestep*=1.05,1.0e-5);
			//std::cout<<"timestep: "<<timestep<<std::endl;
		}
        // Continuosly check if some particle must be removed:
        remover.ProcessParticles(sys);

        // Use the processor to count particle flow in the rectangle section:
        //processor_flowcount.ProcessParticles(sys);
        //GetLog() << "Particles being flown across rectangle:" << counter->counter << "\n";
		
        sys.DoStepDynamics(timestep);
		
		//bmcRod->SetPos_dt(ChVector<>(0, 50, 0));
		
		
		if (std::fmod(step_num, 800) ==0) {
			//timestep=std::min(timestep*=1.05,20.0e-6);
		    sprintf(filename, "%s/bmc_fill%06d.vtk", out_dir.c_str(), step_num);
		    WriteParticlesVTK(sys, filename);		    	    
		    std::cout<< "filename: "<<filename<<"\n";			 
			//
			sprintf(filename, "%s/bmcRod_fill%06d.vtk", out_dir.c_str(), step_num);			
            WritebmcSolidVTK(filename, bmcRod_mesh, bmcRod->GetFrame_REF_to_abs());
			//
			sprintf(filename, "%s/bmcCont_fill%06d.vtk", out_dir.c_str(), step_num);				
            WritebmcSolidVTK(filename, bmcContainer_mesh, bmcContainer->GetFrame_REF_to_abs());
       
        ChVector<> torque = motor->Get_react_torque();
        ChVector<> w_pos = bmcRod->GetPos();
        //w_vel = bmcRod->GetPos_dt();
        ChVector<> angvel = bmcRod->GetWvel_loc();
		ChVector<> w_vel = motor->GetMotorRot_dt();
        //angvel = motor->GetMotorTorque();   

        if (true) {
            std::cout << "time: " << sys.GetChTime()<<"  timestep: "<< timestep;
            std::cout << "  bmcRod position:         " << w_pos ;
            std::cout << "  bmcRod linear velocity:  " << w_vel ;
            std::cout << "  bmcRod angular velocity: " << angvel ;            
            std::cout << "  bmcRod torque: " << torque << std::endl;
	    fprintf(fptr, " %10.6f\t ", sys.GetChTime() );
	    fprintf(fptr, " %10.6f %10.6f  %10.6f\t ", w_pos.x(), w_pos.y(), w_pos.z() );
	    fprintf(fptr, " %10.6f %10.6f  %10.6f\t ", w_vel.x(), w_vel.y(), w_vel.z() );
	    fprintf(fptr, " %10.6f %10.6f  %10.6f\t ", angvel.x(), angvel.y(), angvel.z() );
	    fprintf(fptr, " %10.6f %10.6f  %10.6f\n ", torque.x(), torque.y(), torque.z() );
        } 
		   
		if (sys.GetChTime()>4.0){
			timestep=std::min(timestep*=1.05,3.0e-5);
			//std::cout<<"timestep: "<<timestep<<std::endl;
		}		
		
		 }
		 step_num++;
    }

    return 0;
}
